Peg {
  Grammar
    = Header* code id ":" id "{" Rule* "}"

  Header
    = "%" id ":" HeaderValue

  HeaderValue
    = String                      -- text
    | NonemptyListOf<id, ".">     -- qualified

  Rule
    = id Formals? Description? op Alternative

  Description
    = "(" (~")" any)* ")"

  Formals
    = "<" NonemptyListOf<id, ","> ">"

  Alternative
    = "|"? NonemptyListOf<Action, "|">

  Action
    = Sequence   code   -- action
    | Sequence          -- no_action

  Sequence
    = Binding*

  Choice
    = NonemptyListOf<Sequence, "|">  -- choice
    | Sequence

  Binding
    = id ":" Iter      -- named
    | Iter             -- unnamed

  Iter
    = Pred "*"                           -- repeat0
    | Pred "+"                           -- repeat1
    | Pred "?"                           -- optional
    | Pred

  Pred
    = "&" Lex                           -- lookahead
    | "~" Lex                           -- negation
    | Lex

  Lex
    = "#" Base                          -- lexify
    | Base

  Base
    = id Params? ~RuleDef                             -- apply
    | String ".." String                              -- range
    | String                                          -- literal
    | "(" Choice ")"                                  -- group

  RuleDef 
    = Description? op

  Params
    = "<" NonemptyListOf<Iter, ","> ">"

  String
    = string


  // -- LEXICAL RULES -------------------------------------------------
  newline 
    = "\n" | "\r"
  line 
    = (~newline any)*
  comment 
    = "//" line
  space 
    += comment

  id_start 
    = letter | "_"
  id_rest 
    = id_start | digit
  id 
    = id_start id_rest*


  raw_character 
    = ~"\"\"\"" any

  escape_sequence
    = "b"                 -- backspace
    | "f"                 -- form_feed
    | "n"                 -- newline
    | "r"                 -- return
    | "t"                 -- tab
    | "u" unicode_escape  -- unicode
    | "\""                -- quote
    | "\\"                -- backslash

  string_character
    = ~("\"" | "\\") any    -- non_escaped
    | "\\" escape_sequence   -- escaped

  unicode_escape 
    = hexDigit hexDigit hexDigit hexDigit

  string
    = "\"" string_character* "\""

  
  code
    = "%[" (~"]%" any)* "]%"

  op
    = "+=" | ":=" | "="
}